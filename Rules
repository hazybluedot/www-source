#!/usr/bin/env ruby
# -*- coding: utf-8 -*-


unless defined? LOADED_DEFAULT_CONFIG
  LOADED_DEFAULT_CONFIG = true
  require 'compass'
  Compass.add_project_configuration 'config.rb' 
end

sass_options = Compass.sass_engine_options

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

preprocess do
  config[:git_url] = config[:gl_user] + "@" + config[:gl_host]
  @items.delete_if { |i| i.identifier.chop =~ /.*\/\#/ }
  @items << index_item_for(/^\/reference\/\w+/, '/references/', "References")
  @items << index_item_for(/^\/reading\/\w+/, '/reading/', "Background Reading")
  @items << recent_posts('Recent Posts', '/', (0..25))
  @items << syndicated_list('Fall 2013', '/projects/f13/', sorted_projects, item_layout:'project_slug', identifier:'/projects/')
  taxonomy_items = taxonomy_items("/taxonomy/tools")
  @items << taxonomy_items if taxonomy_items.any?
  @items << activity_schedule("/activities_list/", :activity_list => "/schedule_v2/")
end

compile '/indexes/*/' do
  layout 'index_page'
  filter :relativize_paths, :type => :html
end

compile '/blogroll/' do
  layout 'blogroll'
  filter :relativize_paths, :type => :html  
end

compile '/assets/*' do
  #don't filter
end

compile '/snippets/*' do
  #don't filter
end

compile '/stylesheets/_*/' do
  # don’t filter or layout
end

compile '/stylesheets/partials/*' do
  # don’t filter or layout
end

compile '/stylesheets/base/*' do
  # don’t filter or layout
end

compile '/stylesheets/custom/*' do
  # don’t filter or layout
end

compile '/command_transcript_test/*' do
  filter :kramdown, :fenced_code_blocks => true, :enable_coderay => false
end

compile '/stylesheets/*/' do
  filter :sass, sass_options.merge(:syntax => :scss)
  filter :relativize_paths, :type => :css
end

compile '/syndicated/*/' do
  #don't filter or layout
end

compile '/projects/*/' do
  filter :kramdown, :fenced_code_blocks => true
end

compile '/features/*/'do
  filter :colorize_syntax,:default_colorizer => :pygmentsrb
  layout 'feature'
  filter :relativize_paths, :type => :html
end

compile '/reviews/*' do
  case item[:extension]
  when 'md'
    filter :kramdown, :fenced_code_blocks => true, :enable_coderay => false
    filter :colorize_syntax, :default_colorizer => :pygmentsrb
  end
  layout 'project_review'
  filter :relativize_paths, :type => :html
end

compile '/activities_list/' do
  layout 'schedule'
  filter :relativize_paths, :type => :html
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else 
    case item[:extension]
      when 'md'
        filter :erb
        filter :kramdown, :fenced_code_blocks => true, :enable_coderay => false
      when 'haml' 
        filter :haml
      when 'org'
        filter :erb
	filter :orgmode
      when 'slim'
        filter :slim
    end
    case item[:kind]
    when 'activity'
      layout 'activity'
    when 'reading'
      layout 'activity'
    when 'article_list'
      layout 'ordered_articles'
      filter :vstrip
    else
      layout 'article'
    end
    filter :relativize_paths, :type => :html
    filter :snippet
    filter :colorize_syntax, :default_colorizer => :pygmentsrb
    filter :command_code
  end
end

route '/stylesheet/' do
  '/style.css'
end

route '/stylesheets/_*' do
  nil
end

route '/stylesheets/partials/*' do
  nil
end

route '/stylesheets/base/*' do
  nil
end

route '/stylesheets/custom/*' do
  nil
end


route '/syndicated/*/' do
  nil
end

route '/stylesheets/*' do
  item.identifier.chop + '.css'
end

route '/assets/api/*' do
  item.identifier.chop
end

route '/assets/*' do
  item.identifier.chop
end

route '/snippets/*' do
  item.identifier.chop
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :slim
