// Page layout can be done using mixins applied to your semantic classes and IDs
// For instance this layout defines a two column layout on pages with
// a body class of "two-col".
//
// The markup would look like:
//    <div id="container">
//      <div id="header"></div>
//      <div id="sidebar"></div>
//      <div id="content"></div>
//      <div id="footer"></div>
//    </div>
//
// and the layout would look like:
//    +------------------------+
//    |        #header         |
//    +--------+---------------+
//    |        |               |
//    |#sidebar|    #content   |
//    |        |               |
//    +------------------------+
//    |        #footer         |
//    +--------+---------------+

@import "susy";

// Grid --------------------------------------------------------------

$total-columns  : 5;             // a 5-column default (design for smallest screen)
$column-width   : 4em;            // each column is 4em wide
$gutter-width   : 1em;            // 1em gutters between columns
$grid-padding   : $gutter-width;  // grid-padding equal to gutters

$mobile   : 5;
$tablet   : 8;
$desktop  : 16;

$column-divizor: 4;

body {
    #container {
        @include container($total-columns, $tablet, $desktop);
        //@include susy-grid-background; 
        @include at-breakpoint($tablet)
        {
            @include container($tablet);
        }
        @include at-breakpoint($desktop)
        {
            @include container($desktop);
            //@include susy-grid-background; 
        }

    }

    >header, >footer {
        @include span-columns($total-columns);
        @include at-breakpoint($tablet) {
	    $content-columns: ceil(3 * $tablet / $column-divizor);
	    @include span-columns($content-columns, $tablet);
        }
        @include at-breakpoint($desktop) {
	    $content-columns: ceil(3 * $desktop / $column-divizor);
	    @include span-columns($content-columns, $desktop);
	    @include pad(2,2);
        }
        .title {
	    display: block;
        }
	hgroup, nav {
            @include span-columns($total-columns);
            @include at-breakpoint($tablet) {
		$content-columns: ceil(3 * $tablet / $column-divizor);
		@include span-columns($content-columns omega, $tablet);  
            }
            @include at-breakpoint($desktop) {
		$content-columns: ceil(3 * $desktop / $column-divizor);
		@include span-columns($content-columns omega, $desktop);  
		@include pad(2,2);
		//@include post(2);
            }
	}
    }
    
    
    #sidebar {
        display: none;
        // One third of the grid columns, rounding down. With 24 cols, this is 8.
    /*@include at-breakpoint($desktop) {
      display: inline;
      $sidebar-columns: floor($desktop / $column-divizor);
      @include span-columns($sidebar-columns, $desktop);
      }*/
    }

    #content {
        @include span-columns($total-columns);
        @include at-breakpoint($tablet) {
            $content-columns: ceil(3 * $tablet / $column-divizor);
            @include span-columns($content-columns omega, $tablet);  
            @include pad(1,1);
        }
        @include at-breakpoint($desktop) {
            $content-columns: ceil(3 * $desktop / $column-divizor);
            @include span-columns($content-columns omega, $desktop);  
            @include pad(2,2);
            //@include post(2);
        }
    }
}

header, footer {
    clear: both;
}
