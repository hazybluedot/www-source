---
title: Schedule
---

* Schedule
** By Friday, November 11 at 11:59pm
   1. Submit a [[/activities/project_proposal][project proposal]]
** By Monday, December 2 at 10:10am
   1. Read [[http://git-scm.com/book/en/Distributed-Git-Distributed-Workflows][Distributed Git - Distributed Workflows]] 
   1. Read and complete exercises in [[http://www.diveintopython3.net/native-datatypes.html][Chapter 2]] of Dive into Python
      - skim most sections, depending on your familiarity with each data type in other languages
      - pay closer attention to [[http://www.diveintopython3.net/native-datatypes.html#numbers][lists]], [[http://www.diveintopython3.net/native-datatypes.html#tuples][tuples]], [[http://www.diveintopython3.net/native-datatypes.html#sets][sets]], [[http://www.diveintopython3.net/native-datatypes.html#dictionaries][dictionaries]] and [[http://www.diveintopython3.net/native-datatypes.html#none][None]]
*** In Class
    - [[/activities/collaboration/][Planetary Collaboration]]

** By Wednesday, December 4 at 10:10am
   1. Read and complete exercises in Chapter 3 of Dive into Python #TODO: possibly skip to list comprehension
      - list comprehension
   python generators vs. C++ iterators
   python list comprehension vs. C++ STL algorithms

** By Monday, December 9 at 10:10am
   
** By Wednesday, December 11 at 10:10am

* Older
** By Wednesday August 28 at 10:10am
   Read [[/syllabus/][the syllabus]] for this class as well as the [[/getting_started/][getting started]]
   documentation. Please bring any concerns or questions to my
   attention.
** By Friday August 30 at 11:59pm
1. [[/getting_started/][Set up a blog]]
2. Read chapter [[http://catb.org/esr/writings/taoup/html/philosophychapter.html][I.1 Philosophy]] of [[http://www.catb.org/esr/writings/taoup/html/][The Art of Unix Programming]]. Pick
   two nuggets that jump out at you and blog about them.  These could
   either be things that spark your interest, or that you don't quite
   understand. Be sure to include a cited quote for each nugget. How
   do you hope to explore these interests in this class?
3. Send me an email with the url to your blog post. I will add the feed to to the class list and your future posts will be syndicated to the class website.
** By Monday, September 2 at 10:10am
   1. Read [[/git/getting_started/][Getting Started with Git]], following any links you need to based on your current level of comfort.
   2. Read the first three sections of [[http://linuxcommand.org/lc3_learning_the_shell.php][Learning the Shell]] in The Linux
      Command Line (section 3 is called "[[http://linuxcommand.org/lc3_lts0030.php][Looking Around]]" on the
      website version and "Exploring the System" in the book/PDF).  
   3. At this point you should know how to run commands from the
      command line and have a working knowledge of the following
      commands:
      - pwd
      - cd
      - ls
      - less
      - file
*** In Class
      [[/activities/scavenger/index.html][Source Code Scavenger Hunt]] 

** By Wednesday, September 4 at 10:10am
   1. Follow the instructions to [[/getting_started_ssh/index.html][create and install an SSH key]].
   1. Work through section 4 from [[http://linuxcommand.org/tlcl.php][The Linux Command Line]]:
      "Manipulating Files and Directories".  Note that the [[/assets/TLCL-13.07.pdf][PDF version]] of the book introduces the
      ~ln~ command and includes a helpful exercise that the website
      version does not.  Be sure to familiarize yourself with the
      contents of the [[/assets/TLCL-13.07.pdf][PDF version]].
   2. At this point you should be familiar with the following
      additional commands:
      - cp
      - mv
      - mkdir
      - rm
      - ln
      as well as have a basic understanding of how wildcards are used on the command line.
*** In Class
    [[/activities/io_test/index.html][I/O Test Activity]]

** By Monday, September 9 at 10:10am
   1. Work through sections 5 and 6 of The Linux Command Line:
      - "Working with Commands"
      - "Redirection"
      After working through these sections you should be familiar with the additional list of commands:
      - type
      - which
      - help
      - man
      - whatis
      - alias
      
      As well as all those listed at the start of section 6.

      At this point you may be feeling overwhelmed with the number of
      new commands you should be familiar with, as well as the
      concepts introduced in the "Redirection" section.  But you also
      now know several tools that you can use to help remind you what
      a particular command does. Most of these commands will be found
      on any Unix-like system you find yourself at which means perfect
      memorization is not required. You will find that over time some
      commands you will learn by heart because you used them often
      while others you will use less frequently and refer to the
      manual pages when needed. 
*** In Class
    [[/activities/redirection/index.html][Pipes and Streams]]

** By Wednesday, September 11 at 10:10am
   1. Work through section 7 of The Linux Command Line
   2. Read Section 3.1 [[http://www.catb.org/esr/writings/taoup/html/ch03s01.html][The Elements of Operating-System Style]] from [[http://www.catb.org/esr/writings/taoup/html/][The Art of Unix Programming]].
      - Think about how an operating system's "unifying idea" shapes
        how users and developers interact with it. What are the
        unifying ideas of Unix (and have they carried over to Linux?)
        and how do they shape how you interact with the system and
        write code for it?
	
** By Monday, September 16 at 10:10am
   1. Work through section 8 of [[/assets/TLCL-13.07.pdf][The Linux Command Line]]
   2. Search the web for examples of shell command
      pipelines. [[commandlinefu.com]] is a good resource, but there are
      others. The commands listed in section 6 of The Linux Command
      Line are often used in pipelines, try searching for those
      commands on commandlinefu.com (or use the keyword links on the
      right side panel), or elsewhere on the Internet for good
      pipeline examples.  You may find some pipelines that use
      commands you do not have installed on your system. Try using
      ~apt-get~ or ~yum~ to install them in that case.  Pick one
      command that you like and learn what each part does. Come to
      class prepared to share it with others.
*** In Class
   [[/activities/showandtell/index.html][Command Show and Tell]]
** By Wednesday, September 18 at 10:10am
   1. Work through section 9 of [[/assets/TLCL-13.07.pdf][The Linux Command Line]]
   2. Familiarize yourself with the ~NAME~, ~SYNOPSIS~ and
      ~DESCRIPTION~ sections of the ~man~ pages for ~open(2)~,
      ~dup(2)~ and ~close(2)~. Focus on how those system
      calls manipulate file descriptors.
*** In Class
    [[/activities/file_descriptors/index.html][Playing with File Descriptor]]

** By Monday, September 23 at 10:10am
   1. Submit (~git push~) your ~fdtest~ repo. Make sure the tests pass with 100%. If you can't access the test results or are unsure why some are failing send me an email.
   2. Check your grade for 'iotest part 1' in Gradebook on [[https://scholar.vt.edu][Scholar]].
      If it is a '0' it probably means I couldn't find a submission
      for you, or you didn't ~git push~ your ~iotest~ repo.  Contact
      me to figure out how to fix it. If it is less than 100 then
      check the test results by running ~git push~ in your ~iotest~
      directory. If there is a discrepancy between the test results
      and the score on scholar, or you aren't sure how to interpret
      the test results, let me know.
   3. Work through section 10, Processes of [[/assets/TLCL-13.07.pdf][The Linux Command Line]]

*** In Class
    [[/activities/redirect_algorithm/index.html][Redirect Algorithm]]
** By Wednesday, September 25 at 10:10am
   1. Review any material and assignments you have from ECE2574 (or a
      similar data structures and algorithms course) regarding linked
      data structures (lists, queues, trees, etc. and algorithms used
      with them)
   2. I have transferred scores as of Monday evening from the ~fdtest~ assignment to Scholar, these should *not* be viewed as final grades for that assignment, but instead as a sanity check and to identify problem areas (either with understanding the ~fdtest~ assignment, or the test scripts that run your code!).  If the score on Scholar does not match what you see when you run ~git push~ from your ~fdtest~ directory, let me know (and keep that if you have made changes to your repository since yesterday then that could be the reason for the mis-match).  If you received a 0 for ~fdtest~ then it means I was unable to access your ~fdtest~ repository (perhaps you never forked it in the first place?).
   3. Some testing is implemented for the ~redir~ activity.  Push your changes to see test results.
   4. An ece2524 alum just alerted me to [[http://explainshell.com/][explainshell.com]]. Check it out, it is super cool.
*** In Class
    1. Explain your ~fdtest~ and/or ~redir~ implementation to a
       colleague.  If you ran into snags along the way, mention what
       they were and how you moved around them.  Were there any
       techniques that you found helpful while working through these
       two activities?
    2. Discuss what the connection may be between the linked list
       implementations you worked with in ECE2574 and what we are
       currently working on with the ~redir~ activity.  If we wanted
       to make our ~do_redirect~ function more powerful and operate on
       a list of redirect instructions, what are some ways we could do
       that? What is the fewest lines of code we could add to
       accomplish that goal?

    3. continue [[/activities/redirect_algorithm/index.html][Redirect Algorithm]]
** By Monday, September 30 at 10:10am
   1. Read [[http://www.catb.org/esr/writings/taoup/html/ch15s04.html][make: Automating Your Recipes]] from TAOUP
   2. Read [[http://www.gnu.org/software/make/manual/html_node/Makefile-Contents.html#Makefile-Contents][What Makefiles Contain]] from the GNU make manual
      a. Follow the link for and read [[http://www.gnu.org/software/make/manual/html_node/Rules.html#Rules][Writing Rules]] also reading at least the [[http://www.gnu.org/software/make/manual/html_node/Rule-Syntax.html#Rule-Syntax][Rule Syntax]] and [[http://www.gnu.org/software/make/manual/html_node/Rule-Example.html#Rule-Example][Rule Example]] sections.
   3. Study the ~Makefile~ in your ~fdtest~ and ~redir~ repositories (included when you forked the skeleton repos)

*** In Class
    1. let's take a short break from the code behind ~redir~ and look
       at the build process. What happens when you run ~make~?
    2. [[/activities/make_cxxtest/index.html][Makefile for a CxxTest project]].
** By Wednesday, October 2 at 10:10am
   1. Have the [[/activities/make_cxxtest/index.html][CxxTest Makefile]] activity completed.
   2. Re-read [[http://www.catb.org/esr/writings/taoup/html/ch01s06.html#id2878742][Rule of Generation]] from TAOUP. How does this rule relate
      to the CxxTest example (this has more to do with the role
      ~cxxtestgen~ has than the Makefile itself. If you hadn't seen
      the CxxTest framework before this compare notes with someone who
      has at the start of class)?
*** In Class
    [[/activities/lex_and_make/index.html][Scan, Parse and Build, oh my]].
** By Monday, October 7 at 10:10am
   1. Double check that you have everything pushed for 
      - ~iotest~ 
      - ~fdtest~
      - ~redir~
      - ~cxxstack~
      These are the four activities that should have been submitted
      thus far. There is no late penalty for any of them, just make
      sure you have a good enough understanding to get 100 on each of
      them. They will provide the foundation for what is to come.

   2. Review any assignments from previous classes relevant to
      balanced parenthesis checking. Make sure you have a sound
      technical understanding of how one might check for balanced
      parenthasis. First think about the problem of just checking for
      one kind (e.g. ~(~ and ~)~). What would need to change to check
      for multiple types (e.g. ~([])~, ~{ ([]) }~). If you have the
      "Walls & Mirrors" Data Structures and Algorithms book by Carrano, it
      covers one algorithm for dealing with this problem starting on
      page 292.
   3. Read description of the activity for Monday, think about what
      questions are asked and start thinking about how you would
      answer them.
*** In Class
    [[/activities/balancing_act/index.html][Design a Balanced Parenthesis Checke]]r
    
** By Wednesday, October 9 at 10:10am
   1. [[/activities/balanced_features/index.html][Balanced Brace Checker Features]]
** By Monday, October 14 at 10:10am
   1. Read the first 3 sections (introduction, Encapsulation and
      Optimal Module Size and Compactness and Orthogonality) of
      [[http://www.catb.org/esr/writings/taoup/html/modularitychapter.html][Chapter 4. Modularity]] from TAOUP. While reading, think about
      - how is the optimal module size related to our own human constraints/abilities?
      - how does modularity affect other types of designed, not just software?
      - how do the tools we have available to us affect the modularity of our designs?
      - what are some techniques we can use to help write good, modular code?
      - how do these ideas of modularity apply to the balanced brace checker program?
   2. Have the first version of your balanced brace checker completed. It should
      - correctly detect and report balancing errors for curly braces
        (~{~, ~}~)
      - correctly report program/user errors like supplying
        non-existent file names on the command line.
   3. Review the code you wrote for the balanced brace checker.
      - Is it modular?
      - Are the functions/classes/methods [[http://www.catb.org/esr/writings/taoup/html/ch04s02.html#orthogonality][orthogonal]]?
      - Does it obey the [[http://www.catb.org/esr/writings/taoup/html/ch04s02.html#spot_rule][SPOT rule]]?
      - Does the design center around a [[http://www.catb.org/esr/writings/taoup/html/ch04s02.html#id2895445][Strong Single Center]]?
*** In Class
    1. [[/activities/balanced_code_swap/index.html][Code Review and Critique]]
    2. If necessary, refactor your code in response to feedback
** By Wednesday, October 16 at 10:10am
*** In Class
    1. [[/activities/balanced_review_report/index.html][Balanced Code Review Report]]
    2. [[/activities/balanced_review_merge/index.html][Balanced Code Review Merge]]
** By Monday, October 21 at 10:10am
*** In Class
    - [[/midterm_topics/index.html][Midterm Topic List]]
    - Work in teams to continue [[/activities/balanced_code_swap/index.html][reviewing]] and fixing [[/activities/balancing_act/index.html][balanced brace checker]] assignment.
      - good separation of algorithm and interface (at least two separate functions: ~main~ and the one implementing the algorithm)
      - standard input stream should be treated no differently than streams created by opening a file
      - Makefile should use variables to stay DRY, have an 'all' and 'clean' target and build program in two steps: compile and link
** By Wednesday, October 23 at 10:10am
   - Read Section 19 (Regular Expressions) of [[/assets/TLCL-13.07.pdf][The Linux Command Line]]
   - Visit [[https://www.debuggex.com/][Debuggex]] and try out some of the regex examples from the reading in the visualizer.
   - Check your ~/usr/shar/dict/~ directory for a file named ~words~
     or something similar.  If no files exist in that directory then
     install a words file:
     - Fedora
       #+BEGIN_EXAMPLE
       # yum install words
       #+END_EXAMPLE
     - Ubuntu
       #+BEGIN_EXAMPLE
       # apt-get install wamerican
       #+END_EXAMPLE
       or [[http://packages.ubuntu.com/lucid/wordlist][another dictionary]].
*** In Class
    [[/activities/regex/index.html][Regex Exercise]]
** By Monday, October 28 at 10:10am
   1. Review [[/midterm_topics/index.html][Midterm Topic List]], come to class with any questions.
*** In Class
    1. Practice midterm
       - fork the ~midterm/practice~ repo to ~USER/midterm/practiceN~ where N is a number (1 or more digits between 0 and 9).
       - clone the repo you just forked
       - open ~README.md~ and follow instructions.
** By Monday, November 4 at 10:10am
   Read [[/assets/TLCL-13.07.pdf#page%3D378][sections 24]] [[/assets/TLCL-13.07.pdf#page%3D405][and 27]] of [[/assets/TLCL-13.07.pdf][The Linux Command Line]]

   Be sure to run the commands to get a feel for what is going on,
   especially the meaning of the ~$?~ shell variable.
   
   While reading the bit on Exit Status in section 27 think about how we
   might use the exit status in our balanced brace checker to provide
   information back to the caller.
*** In Class
    [[/activities/balanced_exit_status/index.html][Exit Status for Balanced Brace Checker]]
** By Wednesday, November 6 at 10:10am
   1. [[/reading/cla_intro/index.html][Motivation for CLA parsing libraries]]
   2. [[/reading/cla_basics/index.html][Basics of CLA parsing and optget]]
*** In Class
    [[/activities/balanced_cli_options/index.html][Add CLA parsing to 'balanced']]
** By Monday, November 11 at 10:10am
   1. Balanced Brace Checker, [[/activities/balanced_exit_status/][@part2]] and [[/activities/balanced_cli_options/][@part3]]
      
   *Due date extended until Nov. 11 at 11:59pm* due to cucumber bug.
      
*** In Class
    1. Discuss Final Projects
    2. Explore [[/projects_past/index.html][Projects of Semesters Past]]
    3. Brainstorm

** By Wednesday, November 13 at 10:10am
   1. Review the manual page for [[http://www.manpagez.com/man/1/test/][test(1)]]
      
      Practice using the ~test~ utility in shell conditional statements:
      - branch *if* a particular file does (not) exist
      - branch *if* a string is (not) empty
      - branch *if* FILE1 is newer/older than FILE2
   2. Read section [[/assets/TLCL-13.07.pdf#page%3D433][29 - Flow Control: Looping with while/until]] in [[/assets/TLCL-13.07.pdf][TLCL]]
   3. Continue to brainstorm about [[/project_guidelines/index.html][final project ideas]]

** By Monday, November 18 at 10:10am
   1. Read and complete exercises in [[http://www.diveinto.org/python3/your-first-python-program.html][Chapter 1]] of Dive into Python. If
      you have trouble with your own Python installation, use your
      ece2524 shell account.
*** In Class
   1. [[/activities/script_work/index.html][Script Work]]

