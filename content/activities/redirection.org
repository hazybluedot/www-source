--- 
title: Pipes and Streams
--- 

#+OPTIONS: f:t

Hopefully working through section 5 provided some level of comfort.  There *are* a lot of commands to
remember, but there is also an excellent reference system available on
most[fn:1] Unix-like systems.

** Setup
  Switch to the same ~iotest~ directory you used last week.  We will be adding new files to this repository.
  
  If you find that some of the manual pages used in this activity are not available on your system you probably need to install a package:
  - Fedora
    #+BEGIN_EXAMPLE
    $ yum install man-pages
    #+END_EXAMPLE
  - Ubuntu
    #+BEGIN_EXAMPLE
    $ apt-get install manpages manpages-dev
    #+END_EXAMPLE

** File Abstractions Through the Layers
#+BEGIN_HTML
<iframe height="350" width="500" src="/assets/images/call_layers.svg"></iframe> <br/>
<a href="/assets/images/call_layers.svg">Full Screen</a>
#+END_HTML

** Standard Streams

Manual pages aren't just for shell commands. There are also reference pages for standard library calls and system calls.

#+BEGIN_EXAMPLE
$ man puts
#+END_EXAMPLE

We see that ~puts~ is part of a family of similar functions.  Notice
the page tells you which header file you will need to include to use
the functions. Also note the 'BUGS' section. 

Something like this:

#+BEGIN_SRC c
  #include <stdio.h>
  #include <unistd.h>
  
  int main() {
    puts("hello");
    write(1, "world\n", 6);
  }
#+END_SRC

is not recommended. Of course the best way to get someone to do
something is to tell them not to.

*Write* the program up in a file called ~buffered_hello.c~. Be sure to
*add* and *commit* it to the git repository, using an appropriate commit
message.  Now let's compile it and see what happens.

#+BEGIN_EXAMPLE
$ cc -o buffered_hello buffered_hello.c
$ ./buffered_hello
...
$
#+END_EXAMPLE

Now run it again, but redirect the output to a file named ~test~

#+BEGIN_EXAMPLE
$./buffered_hello > test
$ cat test
...
#+END_EXAMPLE

You should see some difference in the output between the two examples.
What do you think accounts for the difference? Does this segment from
section 7.21.3 of the [[/assets/c-standard-draft-n1570.pdf][C standard]] shed any light?

#+BEGIN_QUOTE
At program startup, three text streams are predefined and need not be
 opened explicitly â€” /standard input/ (for reading conventional
 input), /standard output/ (for writing conventional output), and
 /standard error/ (for writing diagnostic output). As initially
 opened, the standard error stream is not fully buffered; the standard
 input and standard output streams are fully buffered if and only if
 the stream can be determined not to refer to an interactive device.
#+END_QUOTE

Note the order in which the standard streams are listed. This is the
order they are opened and are assigned the file descriptors 0, 1,
and 2, respectively.  Take a look at the man page for ~open~ to see
why.

#+BEGIN_EXAMPLE
$ man open
#+END_EXAMPLE

Section 6 of /The Linux Command Line/ may leave the false impression
that file descriptors are a shell-level feature for referring to the
standard I/O streams. They are actually much more than that: they are
a kernel-level value which are used to provide processes with access
to open files.  You can think of file descriptors as a pointer to a
particular file int the filesystem. While every process that starts up
will have a file descriptor 1, which we commonly call /standard out/,
the two file descriptor 1s that two different processes have will won't
necessarily point to the same file.

Take a moment to review the man page for
the ~write~ system call.

#+BEGIN_EXAMPLE
$ man 2 write
#+END_EXAMPLE

Note: We did not need the ~2~ in the command when viewing the man page
for ~open~, but we do for ~write~, why? What happens if we don't
include it?

Which argument to write indicates the file descriptor to write to?

All this talk of file descriptors, but what is a file? The terminal
screen isn't a file, is it? Well, in the eyes of any process running
on the system, it is. 

#+BEGIN_EXAMPLE
$ tty
/dev/pts/6
#+END_EXAMPLE

Your output of ~tty~ will vary of course. It will report the filename
of the current terminal connected to standard input. Try opening a new
terminal window and run the command again, you should get a different
value. So this is how the output from a command is directed to the
terminal from which it was run, its standard streams all point to the
filename associated with the terminal. On a Linux[fn:2] based system you can run

#+BEGIN_EXAMPLE
$ ls -l /proc/self/fd
#+END_EXAMPLE

to see the listing of file descriptors and their links for the current
process, which when it runs is actually ~ls~, but do to some clever
design decisions that we will talk about later, these are also the
same values that the process running the shell has for its file
descriptors. Run the same ~ls~ command from a different terminal
window to see the difference.

*Modify* the ~buffered_hello~ program to write both ~hello~ and ~world~
to /standard error/, but preserving the ~puts~/~write~
distinction. You will have to use a different ~puts~ function, one
that accepts a ~FILE *stream~ as an argument.  For the standard
library names the three streams ~stdin~, ~stdout~ and
~stderr~. Recompile the program and run it without any redirection,
and then again redirecting standard error to a file.  Do you see any
differences in behavior compared to the example using /standard out/?

*Add* and *commit* the changes to the repo, again with an appropriate
commit message.

** McIlroy's Pipeline

In 1986 Donald Knuth, author of the seminal [[http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming][The
Art of Computer Programming (TAOCP)]], wrote a [[http://en.wikipedia.org/wiki/Literate_programming][Literate
Programming]] article to solved the
following problem:

#+BEGIN_QUOTE
Read a file of text, determine the n most frequently used words, and
print out a sorted list of those words along with their frequencies.
#+END_QUOTE

Knuth's solution was written in Pascal and when printed was 10 pages long.

Doug McIlroy was largely responsible for introducing 'pipes' into the
Unix ecosystem. He reviewed Knuth's article, complimenting its
cleverness, and then offered a 6 line shell pipeline that did the same
thing[fn:3]

#+BEGIN_SRC shell
#!/bin/sh

tr -cs A-Za-z '\n' |
tr A-Z a-z |
sort |
uniq -c |
sort -rn |
sed ${1}q
#+END_SRC

Type the pipeline into a file named ~wordfreq~ and grant it executable
permission:

#+BEGIN_EXAMPLE
$ chmod +x wordfreq
#+END_EXAMPLE

*Add* and *commit* ~wordfreq~ to the git repository.

The command takes a single argument, the number 'n', and reads from
standard input. Try

#+BEGIN_EXAMPLE
$ ./wordfreq 10 < moby.txt
#+END_EXAMPLE

using the text of [[/assets/moby.txt][Moby Dick]] as input.

Try running only the first stage of the pipeline with some input, then
the first and second, and so on. Inspect the output at each stage. You
may wish to work with a sample text shorter than Moby Dick:

#+BEGIN_EXAMPLE
$ echo "The quick, brown fox jumped over the lazy dog." > fox.txt
$ tr -cs A-Za-z '\n' < fox.txt
...
$ tr -cs A-Za-z '\n' < fox.txt | tr A-Z a-z
...
#+END_EXAMPLE

Notice when I add the next stage onto the pipeline I don't change
where the ~< fox.txt~ redirection occurs, still in the first
stage. The order looks a little confusing if we are trying to follow
data flow from left to right, and since ~bash~ is setting up the
redirections before it executes the command (we'll see how it does
this in a few weeks) we can put the redirection syntax on the left of
the command as well:

#+BEGIN_EXAMPLE
$ < fox.txt tr -cs A-Za-z '\n' | tr A-Z a-z
#+END_EXAMPLE

And now we have a nice left-to-right flow of data starting with the original contents of ~fox.txt~.  Note, we could also do

#+BEGIN_EXAMPLE
$ cat fox.txt | tr -cs A-Za-z '\n' | ...
#+END_EXAMPLE

But be forewarned, this is considered a [[http://partmaps.org/era/unix/award.html][useless use of cat]].

Use ~man~ to investigate what each line does to its input.  Add a
comment (in bash comments start with a '#' character) to each line
with a brief description of what it is doing. The ~sed~ command is
pretty powerful, and as such, there is a lot going on in the ~man~
page.  The ~${1}~ notation is a shell variable substitution.  It will
be replaced by the first command line argument given to the program
when run from the command line. So if the command is run with ~10~ as
its argument, the ~sed~ command would expand to

#+BEGIN_SRC shell
sed 10q # pass-through lines unaltered, quit after 10. 
#+END_SRC

which tells ~sed~ to quit when it reaches the 10th line of input. Until
it quits it will pass each line of standard input to standard output
unchanged.  

You learned about another command in section 6 that could be used in
the place of ~sed~ in this script. Which is it?

What change(s) could you make so that the script gave the N /least/
frequency used words?

** Pipeline Challenges
1. Write a command that outputs lines 21 through 28 of input.  Using ~moby.txt~ as input, the ouput should produce
#+BEGIN_EXAMPLE
MOBY DICK; OR THE WHALE

By Herman Melville


Original Transcriber's Notes:

This text is a combination of etexts, one from the now-defunct ERIS project at Virginia Tech and one from Project Gutenberg's archives. The proofreaders of this version are indebted to The University of Adelaide Library for preserving the Virginia Tech version. The resulting etext was compared with a public domain hard copy version of the text.
#+END_EXAMPLE

2. As we discussed, ~strace~ prints its output to /standard error/,
   but the pipe operator ~|~ redirects a command's standard out to the
   input of the proceeding command.  What if we wanted to process the
   output of ~strace~, say to count the number of calls to ~mmap~?

#+BEGIN_EXAMPLE
strace ./hello_puts | # ... rest of the pipeline
#+END_EXAMPLE

won't work because only what is sent to /standard out/ will be
directed to the rest of the pipeline. We will need to redirect
/standard error/ to /standard out/.  We know we can redirect both to
the same place by using

#+BEGIN_EXAMPLE
strace ./hello_puts 2>&1
#+END_EXAMPLE

which will make file descriptor ~2~ point to the same location that
file descriptor ~1~ is pointing to. But let's also say we don't want
the normal output of the ~./hello_puts~ to be sent down the pipeline,
instead, we want it to print to standard error.  We would like to swap
the behavior of /standard out/ and /standard error/, how would you do that?  

*Hint*: Just like when swapping the value between two variables, 

#+BEGIN_SRC c
int a = 42;
int b = 13;
//swap the values of a and b
int temp = b;
b = a;
a = temp;
#+END_SRC

you will need a temporary variable to store data.

#+BEGIN_EXAMPLE
$ strace ./hello_puts 3>&1
#+END_EXAMPLE

will create a new file descriptor '3' that will point to the same
device or file that file descriptor '1' is pointing to. This is your
temporary variable. Add two more redirections to complete the swap,
then pipe the result to the rest of the pipeline to count the number
of calls 'mmap'.

** Footnotes
[fn:1] Like most components of a Unix-like system the manual pages are
an optional install.  In most cases the manual pages for the basic
commands are installed out of the box, and manual pages for new
commands are pulled in when you install them with your package manager
(e.g. ~apt-get~ or ~yum~).  There may be some situations, for example
when building a system that will run on an embedded device with space
limitations, where the manual pages are not installed. Of course, the
documentation is also [[http://linux.die.net/][available online]]. Often times I just "run" my
=man= command from an internet search engine.

[fn:2] the ~proc~ filesystem was introduced in Plan 9 from Bell
Labs. While Plan 9 still hasn't gained much traction outside of
academics many of its features have been incorporated into Linux and
other Unix-like systems, the ~proc~ filesystem being one of them.

[fn:3] this isn't really a fair or complete comparison. See [[http://www.leancrew.com/all-this/2011/12/more-shell-less-egg/][More
shell, less egg]] for more information.
