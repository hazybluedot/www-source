---
title: Make a CxxTest project with Make
test_type: bonair
feature: features/cxxstack
kind: activity
---

*
** Familiarize yourself with ~make~
If you haven't already, experiment with running the ~make~ command
from your ~redir~ directory.  What happens if you run ~make~ a second
time? Modify one of the files with the ~touch~ command and run ~make~

#+BEGIN_EXAMPLE
$ touch redir.c
$ make
#+END_EXAMPLE

What happened?

Try another one:
#+BEGIN_EXAMPLE
$ touch test/retest.c
$ make
#+END_EXAMPLE

How was that different from the time before?

Run
#+BEGIN_SRC console
$ make clean
#+END_SRC console

Now what happened? What do you think will happen if you run ~make~ again now?

After studying the output of ~make~ and how it changes depending on
which files you "update" with ~touch~, what is it doing?

** CxxTest
If you took ECE2574 during Spring 2013 or Summer 2013 you have had
some experience using [[http://cxxtest.com/][CxxTest]], a [[http://en.wikipedia.org/wiki/Unit_testing][Unit Testing]] framework for C++.  There
are several popular Unit Test frameworks, CxxTest isn't necessarily
the best.  We won't be using CxxTest or Unit Testing
explicitly[fn:tddbdd] for this class, but it provides a good
motivating example for writing Makefiles that many of you are already
familiar with.

*** Install
- Fedora
    #+BEGIN_EXAMPLE
# yum install cxxtest
#+END_EXAMPLE

- Ubuntu 12.04
  Unfortunately this version of Ubuntu does not contain a cxxtest package in its default package list, so first we need to install an additional Personal Package Archive (PPA)

  #+BEGIN_EXAMPLE
  # apt-add-repository ppa:dhart
  # apt-get update -qq
  #+END_EXAMPLE

  Now we can install ~cxxtest~
  #+BEGIN_EXAMPLE
  # apt-get install cxxtest
  #+END_EXAMPLE

- Ubuntu 12.10 
    I think as of 12.10 there is a ~cxxtest~ package in the
  default package list. If not, use the instructions above for 12.04.
    #+BEGIN_EXAMPLE
# apt-get install cxxtest
#+END_EXAMPLE

- Arch Linux
    #+BEGIN_EXAMPLE
# pacman -S cxxtest
#+END_EXAMPLE

- ece2524 Shell Account
    Already installed!

Shameless poke at certain OSes without comprehensive package
management solutions: Remember when you had to install CxxTest for
ECE2574? Was it this easy?

*** Usage
We don't want to overwhelm ourselves with the details of writing tests
for this exercise. I have provided a revision of the source code along
with tests we used for the stack assignment in 2574 at
~skel/cxxstack~.  Fork and clone your own local copy named
~USER/cxxstack~. The only file you will need to modify is ~Makefile~.

Ultimately what we want to do is compile and link the ~runner.cpp~ source file
#+BEGIN_SRC console
$ g++ -Wall -std=c++11 -g -c -o runner.o runner.cpp
$ g++ -o runner runner.o
#+END_SRC

But the alert reader will note that ~runner.cpp~ is not part of the
clone repository, in fact, it is not a file that we write by hand. It
is generated by the ~cxxtestgen~ program (on some distributes, notably
Ubuntu 12.04, this is available as ~cxxtestgen.py~ use whatever works
for you after installing ~cxxtest~)

#+Begin_SRC console
$ cxxtestgen --error-printer -o runner.cpp testStack.h
#+END_SRC

What you have to remember though, is that if you change ~testStack.h~
you have to run the ~cxxtestgen~ command again to generate a new
~runner.cpp~.  This is something we want to tell our build environment
to do automatically. When you were using VisualStudio or XCode you had
to navigate through multiple levels of menus to add a custom build
step to run the ~cxxtestgen~ command. We will see that setting this
build up with a ~Makefile~ is much simpler!

*** Write a target
In ~Makefile~ speak the 'target' is what will be made.  We need to
make ~runner.cpp~.  The [[http://cxxtest.com/guide.html#gettingStarted][CxxTest Users guide]] explains how to do that
with the ~cxxtestgen~ command.  In our case, the tests are defined in
~testStack.h~.  If ~testStack.h~ changes, then ~runner.cpp~ should be
regenerated.
