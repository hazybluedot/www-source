---
title: Arguments and Paradigms
test_type: bonair
feature: features/redir
kind: activity
---

** Discussion 

#+BEGIN_HTML
<iframe height="350" width="500" src="/assets/images/call_layers_redir.svg"></iframe> <br/>
<a href="/assets/images/call_layers_redir.svg">Full Screen</a>
#+END_HTML
1. What is the connection between the work we did with pipelines (Show and Tell, word frequency example, etc.) and the ~fdtest~ activity?  
2. How are strings of characters interpreted as commands and executed?
3. What are the data structures and algorithms involved in implementing redirection instructions?

Remember the "[[http://www.catb.org/esr/writings/taoup/html/ch01s06.html#id2878263][Rule of Representation]]" from [[http://www.catb.org/esr/writings/taoup/html/][TAOUP]]? Review it now.

We've seen some fairly complex redirection schemes, for example
#+BEGIN_EXAMPLE
$ ./redirect1 >>log.stdout 2>>log.stderr 3>&2 2>&1 1>&3 3>&-
#+END_EXAMPLE

But as you found by working through the ~fdtest~ exercises, all this
amounts to is executing a prescribed sequence of calls for each part:

- ~>>log.stdout~
  #+BEGIN_SRC c
  fd = open("log.stdout", O_WRONLY | O_CREATE | O_APPEND, S_IRUSR | S_IWUSR);
  // check for errors
  dup2(fd, 1);
  //check for errors
  close(fd);
  #+END_SRC

- ~2>>log.stderr~
  #+BEGIN_SRC c
  fd = open("log.stderr", O_WRONLY | O_CREATE | O_APPEND, S_IRUSR | S_IWUSR);
  // check for errors
  dup2(fd, 2);
  //check for errors
  close(fd);
  #+END_SRC

- ~3>&2~
  #+BEGIN_SRC c
  dup(2,3); // check for errors
  #+END_SRC

- ~2>&1~
  #+BEGIN_SRC c
  dup(1,2); // check for errors
  #+END_SRC

- ~1>&3~
  #+BEGIN_SRC c
  dup(3,1); // check for errors
  #+END_SRC

- ~3>&-~
  #+BEGIN_SRC c
  close(3); // check for errors
  #+END_SRC

We start to see that if we just take one redirect instruction at a
time it becomes pretty straight forward. If we are given a file name
as the redirection destination then
#+BEGIN_SRC c
//pseudo code
fd = open(...);
dup(fd,dest);
close(fd);
#+END_SRC

and if we are given a file descriptor as the redirection destination
then we just need a single call to ~dup2~.

If we're given a data structure that contains the information we need:
- destination: either a file name or file descriptor
- source: a file descriptor
- redirection instruction: output/input/close, append?

then we should be able to write a function that accepts that data
structure as an argument and performs the necessary calls for us.

We will be using the same data structures used by bash

excerpt from ~command.h~ in the bash-4.2 source tree 
#+BEGIN_SRC c
/* Instructions describing what kind of thing to do for a redirection. */
enum r_instruction {
  r_output_direction, r_input_direction, r_inputa_direction,
  r_appending_to, r_reading_until, r_reading_string,
  r_duplicating_input, r_duplicating_output, r_deblank_reading_until,
  r_close_this, r_err_and_out, r_input_output, r_output_force,
  r_duplicating_input_word, r_duplicating_output_word,
  r_move_input, r_move_output, r_move_input_word, r_move_output_word,
  r_append_err_and_out
};

/* What a redirection descriptor looks like.  If the redirection instruction
   is ri_duplicating_input or ri_duplicating_output, use DEST, otherwise
   use the file in FILENAME.  Out-of-range descriptors are identified by a
   negative DEST. */

typedef union {
  int dest;			/* Place to redirect REDIRECTOR to, or ... */
  WORD_DESC *filename;		/* filename to redirect to. */
} REDIRECTEE;

/* Structure describing a redirection.  If REDIRECTOR is negative, the parser
   (or translator in redir.c) encountered an out-of-range file descriptor. */
typedef struct redirect {
  struct redirect *next;	/* Next element, or NULL. */
  REDIRECTEE redirector;	/* Descriptor or varname to be redirected. */
  int rflags;			/* Private flags for this redirection */
  int flags;			/* Flag value for `open'. */
  enum r_instruction  instruction; /* What to do with the information. */
  REDIRECTEE redirectee;	/* File descriptor or filename */
  char *here_doc_eof;		/* The word that appeared in <<foo. */
} REDIRECT;
#+END_SRC

Fork and clone the skeleton files

#+BEGIN_EXAMPLE
$ ssh ece2524git@ece2524.ece.vt.edu fork skel/redir USER/redir
$ git clone ece2524git@ece2524.ece.vt.edu:USER/redir ~/ece2524/redir
$ cd ~/ece2524/redir
#+END_EXAMPLE

Confirm that you can build the skeleton project before making any modifications:

#+BEGIN_EXAMPLE
$ make
...
$ ./retest
This is written to stdout
This is written to stderr
$ fdtrace ./retest
0 -> /dev/pts/5
1 -> /dev/pts/5
2 -> /dev/pts/5
write(42, -1, 42)
r_duplicating_output: not implemented yet
0 -> /dev/pts/5
1 -> /dev/pts/5
2 -> /dev/pts/5
write(26, -1, 26)
This is written to stdout
write(26, -1, 26)
This is written to stderr
$
#+END_EXAMPLE
You will be completing the implementation of ~do_redirect~ in
 ~redir.c~.  The ~_duplicating_~ versions are the ones that correspond
 to a single call to ~dup2~, start with those. Try to get
 ~r_duplicating_output~ implemented today, finish the other three by
 Wednesday morning.

** Testing
Make sure you pull in the latest changes from the set of skeleton files, from your ~redir~ directory

#+BEGIN_EXAMPLE
$ git pull ece2524git@ece2524.ece.vt.edu:skel/redir
...
#+END_EXAMPLE

Your default editor will open the same way it does when git prompts
you for a commit message. You should see a message about a merge. You
can just accept it as is, save the file and close your editor as if
you were accepting a commit message.

There is a sorce file named ~test/retest.c~ which contains a ~main~
function that constructs a suitable ~REDIRECT~ struct given command
line arguments and then pass it to your ~do_reirect~ function.  Run
~make~ to compile everything, if it completes without errors you
should have a ~retest~ executable in the current directory. It takes 3 optional arguments

#+BEGIN_EXAMPLE
$ fdtrace ./retest -n 1 -m output.txt
0 -> /dev/pts/13
1 -> /home/rflowers/ece2524/redir/output.txt
2 -> /dev/pts/13
write(26, -1, 26)
This is written to stderr
write(26, -1, 26)
#+END_EXAMPLE

There is a ~-v~ option to ~retest~ for 'verbose' which will cause it
to print a message with the effective redirect instruction it builds
before passing it to the ~do_redirect~ function.  This can be helpful
if you get ~-n~ and ~-m~ mixed up, which I do all the time:

#+BEGIN_EXAMPLE
$ ./retest -v
performing 3>&1
This is written to stdout
This is written to stderr
$ ./retest -v -n 4 -m output.txt
performing 4>output.txt
This is written to stdout
This is written to stderr
$ ./retest -v -n 1 -m output.txt
performing 1>output.txt
This is written to stderr
$ ./retest -v -n 2 -m 5
performing 1>&5
This is written to stdout
This is written to stderr
#+END_EXAMPLE

Using ~fdtrace~ run the ~retest~ command with several different
argument configurations to test your own implementation of
~do_redirect~.
