---
title: 'Git: Getting started'
---

** Getting Started with ~git~
Throughout the semester we will us the git version control utility to
manage our software projects and submit them for evaluation. If you
have never used or heard of a version control system before take a
moment to read the "[[http://git-scm.com/book/en/Getting-Started-About-Version-Control][About Version Control]]" section of the git
documentation, and, because it ties in so nicely with the content of
this class, read the next section about the [[http://git-scm.com/book/en/Getting-Started-A-Short-History-of-Git][history of git]]. If you are
already familiar with another version control system (e.g. SVN,
mercurial) you can safely jump to [[http://git-scm.com/book/en/Getting-Started-Git-Basics][Git Basics]] paying speciall attention
to [[http://git-scm.com/book/en/Getting-Started-Git-Basics#The-Three-States][The Three States]].  If video explaination is more your style, check
out the [[http://git-scm.com/videos][Git Basics videos]], starting with "What is Version Control".

*** First Time Setup
    Follow the instructions at [[http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup][First Time Git Setup]]. Pay special
    attention to entering your identity information completely and
    accurately (first and last name and a valid email address).  

    - Your Identity : If you configure git on multiple systems
      (e.g. your ece2524 shell account and your laptop) be sure to use
      the same email address for each. This will help me keep track of
      who's who when we start working collaboratively.

    - Your Editor : The default editor on Fedora installs is ~vim~.
      If you have never used vim before besure to run the ~vimtutor~
      command and work through enough to be able to insert text and
      save a file. Alternatively you could set your systems' default editor to ~nano~:
      #+BEGIN_EXAMPLE
      echo 'EDITOR=nano' >> ~/.profile
      #+END_EXAMPLE
      
      You will have to open a new terminal window for the changes to take effect, or run
      #+BEGIN_EXAMPLE
      source ~/.profile
      #+END_EXAMPLE
      once from the current one.

    - Your Diff Tool :
      You may safely ignore this section for the time being.

** Working with ~git~
   While we will be exclusivly using git do keep in mind that it is
one of several widly used Version Control Systems. While the commands
used to interact with different systems will vary, the underlying
ideas will apply to any you encounter. Most common errors are caused
by forgeting what each of the three states means:

#+CAPTION: The Three States of a git managed files
#+ATTR_HTML: :alt "the three states"
[[/assets/images/git_states.png]]

Review [[http://git-scm.com/book/en/Getting-Started-Git-Basics#The-Three-States][The Three States]] from [[http://git-scm.com/book/en/Getting-Started-Git-Basics][Git Basic]]s if you are unsure about the
information on the diagram. What follows should be used as a reminder
of the common sequence of commands used when working with ~git~. For a
more detailed reference do an internet search for 'git cheat sheet',
there are many available.

*** Two Ways to Create a new local ~git~ repo
- Create a new, empty repo

    #+BEGIN_SRC shell-script
  git init
    #+END_SRC

    This will initialize the /current directory/ as a git repo. If you append a new directory name to the command it will be created and an empty git repo will be initialized in it.

    #+BEGIN_SRC shell-script
  git init new_repo
    #+END_SRC

    *What did this do?*
    You may be underwhelmed by the result of these commands.

    #+BEGIN_SRC shell-script
  ls -al
    #+END_SRC

- Clone an existing repo

    Perhaps you already have a git repo stored on a remote machine, or you want to fork a local repo.

*** Common Commit Cycle
- Add files to the staging area
  #+BEGIN_EXAMPLE
  git add [file list]
  #+END_EXAMPLE
- Commit staged changes to the repo
  #+BEGIN_EXAMPLE
  git commit -m "[commit message]"
  #+END_EXAMPLE
  The previous two commands are /local/ operations. No changes are made on the server, or are accessible to me.  

- To push your new commits to the server:
  #+BEGIN_EXAMPLE
  git push origin master
  #+END_EXAMPLE
  or if it is not the first time
  #+BEGIN_EXAMPLE
  git push
  #+END_EXAMPLE

** More Resources
   - [[/git/common_errors/][Common errors with git]]
   - [[http://git-scm.com/documentation][Git documentation]]
   - [[https://na1.salesforce.com/help/doc/en/salesforce_git_developer_cheatsheet.pdf][Git Cheat Sheet]] (one of many)
